/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.25
 * Generated at: 2024-07-29 05:43:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.myPage;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class myPageInfo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/static/css/myPage/myPageInfo.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}/header.jsp", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null), out, false);
      out.write("\r\n");
      out.write("    <div class=\"content\">\r\n");
      out.write("        <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/static/images/extendHeaderImg.png\" alt=\"theDoor\" id=\"extendHeaderImg\">\r\n");
      out.write("        <div id=\"profileArea\">\r\n");
      out.write("            <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/static/images/myPage/profileImg.png\" class=\"profileImg\">\r\n");
      out.write("            \r\n");
      out.write("            <!-- profileAlertImg 이미지변경 함수처리가 안되고 알람있으면, 빨간불 들어오게 만들기 -->\r\n");
      out.write("            <!-- 이미지 사용자가 변경할 수 있도록 만들기 -->\r\n");
      out.write("              \r\n");
      out.write("            <p class=\"emphaFont\">닉네임123</p>\r\n");
      out.write("        </div>\r\n");
      out.write("        \r\n");
      out.write("        <div id=\"selectArea\">\r\n");
      out.write("                <ul>\r\n");
      out.write("                    <li><a href=\"/myPage/info.do\">개인정보</a></li>\r\n");
      out.write("                    <li><a href=\"/myPage/rank.do\">My 랭킹</a></li>\r\n");
      out.write("                    <li><a href=\"/myPage/post.do\">내가 쓴 글</a></li>\r\n");
      out.write("                    <li><a href=\"/myPage/alert.do\">알림</a></li>\r\n");
      out.write("                </ul>\r\n");
      out.write("\r\n");
      out.write("            <div id=\"userInfo\">            \r\n");
      out.write("                <div class=\"old\">\r\n");
      out.write("                    <legend class=\"emphaFont\">기존정보</legend>\r\n");
      out.write("                    <hr>\r\n");
      out.write("                    <br>\r\n");
      out.write("                    <div>\r\n");
      out.write("                        <label for=\"fixUserId\">아이디</label>\r\n");
      out.write("                        <p></p>\r\n");
      out.write("                        <input class=\"fixedUserInfo\" id=\"fixUserId\" type=\"text\" value=\"백앤드로 데이터 받아 고정하기\" readonly>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div>\r\n");
      out.write("                        <label for=\"fixUserName\">이름</label>\r\n");
      out.write("                        <p></p>\r\n");
      out.write("                        <input class=\"fixedUserInfo\" id=\"fixUserName\" type=\"text\" value=\"백앤드로 데이터 받아 고정하기\" readonly>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div>\r\n");
      out.write("                        <label for=\"fixUserEmail\">이메일</label>\r\n");
      out.write("                        <p></p>\r\n");
      out.write("                        <input class=\"fixedUserInfo\" id=\"fixUserEmail\" type=\"text\" value=\"백앤드로 데이터 받아 고정하기\" readonly>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div>\r\n");
      out.write("                        <label for=\"fixUserNick\">닉네임</label>\r\n");
      out.write("                        <p></p>\r\n");
      out.write("                        <input class=\"fixedUserInfo\" id=\"fixUserNick\" type=\"text\" value=\"백앤드로 데이터 받아 고정하기\" readonly>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div>\r\n");
      out.write("                        <label for=\"fixUserBirth\">생년월일</label>\r\n");
      out.write("                        <p></p>\r\n");
      out.write("                        <input class=\"fixedUserInfo\" id=\"fixUserBirth\" type=\"text\" value=\"백앤드로 데이터 받아 고정하기\" readonly>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"new\">\r\n");
      out.write("                    <legend class=\"emphaFont\">회원정보 변경</legend>\r\n");
      out.write("                    <hr>\r\n");
      out.write("                    <br>\r\n");
      out.write("                    <form action=\"#\" method=\"post\">\r\n");
      out.write("                        <div>\r\n");
      out.write("                            <label for=\"newPW\">비밀번호</label><br>\r\n");
      out.write("                            <p></p>\r\n");
      out.write("                            <input id=\"newPW\" type=\"text\">\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div>\r\n");
      out.write("                            <label for=\"newPWCK\">비밀번호 재입력</label><br>\r\n");
      out.write("                            <p></p>\r\n");
      out.write("                            <input id=\"newPWCK\" type=\"text\">\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div>\r\n");
      out.write("                            <label for=\"userEmail\">이메일</label><br>\r\n");
      out.write("                            <p></p>\r\n");
      out.write("                            <input id=\"userEmail\" type=\"email\">\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div>\r\n");
      out.write("                            <label for=\"userNickName\">닉네임</label><br>\r\n");
      out.write("                            <p></p>\r\n");
      out.write("                            <input id=\"userNickName\" type=\"text\">\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <br>\r\n");
      out.write("                        <br>\r\n");
      out.write("                        <div>\r\n");
      out.write("                            <input type=\"submit\" value=\"변경하기\" style=\"background-color: black; color: white; font-weight: bold;\">\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </form>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}/footer.jsp", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null), out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
